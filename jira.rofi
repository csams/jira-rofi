#!/usr/bin/env python3
import argparse
import contextlib
import html
import json
import logging
import os
import requests
import shlex
import subprocess
import time

import filelock

from datetime import datetime

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(message)s")

log = logging.getLogger(__file__)


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument("input", nargs="*")
    p.add_argument("--refresh-cache", action="store_true", default=False)
    p.add_argument("--jql", action="store_true", default=False)
    return p.parse_args()


def cache_file():
    path = os.environ.get("XDG_CACHE_HOME", "${HOME}/.cache")
    path = os.path.expanduser(path)
    path = os.path.expandvars(path)
    dir = os.path.join(path, "rofi")
    os.makedirs(dir, exist_ok=True)
    return os.path.join(dir, "jira-cache.json")


@contextlib.contextmanager
def cache_lock():
    with filelock.FileLock(cache_file() + ".lock") as fl:
        # try to ensure we release the lock even if something goes wrong
        try:
            yield fl
        except Exception as e:
            log.error(e)


def write_cache(issues):
    with open(cache_file(), "w") as f:
        json.dump(issues, f)


def read_cache():
    try:
        with open(cache_file()) as f:
            return json.load(f)
    except Exception:
        return None


def config_file():
    path = os.environ.get("XDG_CONFIG_HOME", "${HOME}/.config")
    path = os.path.expanduser(path)
    path = os.path.expandvars(path)
    return os.path.join(path, "rofi", "jira-rofi-config.json")


def history_file():
    path = os.environ.get("XDG_CACHE_HOME", "${HOME}/.cache")
    path = os.path.expanduser(path)
    path = os.path.expandvars(path)
    dir = os.path.join(path, "rofi")
    os.makedirs(dir, exist_ok=True)
    return os.path.join(path, "rofi", "jira-rofi-history")


def config():
    cfg = {}
    with open(config_file()) as f:
        cfg = json.load(f)

    default_jql = "(assignee=currentUser() or watcher=currentUser()) and status not in (Closed, Resolved) order by updated"
    default_url = "https://issues.redhat.com"

    cfg["token"] = os.environ.get("ROFI_JIRA_TOKEN", cfg.get("token"))
    cfg["url"] = os.environ.get("ROFI_JIRA_URL", cfg.get("url", default_url))
    cfg["jql"] = os.environ.get("ROFI_JIRA_JQL", cfg.get("jql", default_jql))

    return cfg


def query_jira(base_url, jql, token, max_results, start_at=0):
    url = f"{base_url}/rest/api/2/search"
    headers = {"Authorization": f"Bearer {token}"}
    query_parameters = {"jql": jql, "maxResults": max_results, "startAt": start_at}
    resp = requests.get(url, query_parameters, headers=headers)
    resp.raise_for_status()
    return resp.json()


def extract_issues(doc, base_url):
    results = []
    for issue in doc.get("issues", []):
        fields = issue.get("fields", {})

        key = html.unescape(issue["key"])
        issue_type = html.unescape(fields["issuetype"]["name"])
        summary = html.unescape(fields["summary"])
        status = html.unescape(fields["status"]["name"])
        created = (
            datetime.strptime(fields["created"], "%Y-%m-%dT%H:%M:%S.000%z")
            .astimezone()
            .strftime("%Y-%m-%d %H:%M")
        )
        updated = (
            datetime.strptime(fields["updated"], "%Y-%m-%dT%H:%M:%S.000%z")
            .astimezone()
            .strftime("%Y-%m-%d %H:%M")
        )
        reporter = html.unescape(
            fields["reporter"]["displayName"] if fields["reporter"] is not None else ""
        )
        assignee = html.unescape(
            fields["assignee"]["displayName"] if fields["assignee"] is not None else ""
        )
        url = f"{base_url}/browse/{key}"

        results.append(
            {
                "key": key,
                "issuetype": issue_type,
                "summary": summary,
                "status": status,
                "created": created,
                "updated": updated,
                "reporter": reporter,
                "assignee": assignee,
                "url": url,
            }
        )
    return results


def fetch_all_issues(url, jql, token, max_results=100):
    issues = []
    start_at = 0
    while True:
        results = query_jira(url, jql, token, max_results, start_at=start_at)
        new_issues = extract_issues(results, url)
        issues.extend(new_issues)
        if len(issues) >= results["total"]:
            break
        start_at += len(new_issues)
        time.sleep(0.6)
    return issues


def find_issues(url, jql, token, max_results=100):
    with cache_lock():
        issues = read_cache()
        if issues is None:
            issues = fetch_all_issues(url, jql, token, max_results)
            write_cache(issues)
        return issues


def refresh_cache(url, jql, token, max_results=100):
    with cache_lock():
        issues = fetch_all_issues(url, jql, token, max_results)
        write_cache(issues)


def render_issues(issues):
    row_fmt = "{0: <20}{1: <18}{2: <80}{3: <20}{4: <18}{5: <18}{6: <25}{7: <25}"
    print("\000prompt\037Open Jira Issue\n")
    print("\000data\037show-issues\n")

    # the "message" is a line just beneath the prompt box.  We use it to display a header.
    header = row_fmt.format(
        "Key", "Type", "Summary", "Status", "Created", "Updated", "Reporter", "Assignee"
    )
    print(f"\000message\037{header}\n")

    for i in issues:
        data = (
            i["key"],
            i["issuetype"],
            i["summary"][:78],
            i["status"],
            i["created"],
            i["updated"],
            i["reporter"][:23],
            i["assignee"][:23],
        )
        print(f"{row_fmt}\000info\037{i['url']}\n".format(*data))


def render_plain(url, issues):
    row_fmt = "{0: <50}{1: <18}{2: <70}{3: <20}{4: <18}{5: <25}{6: <25}"
    header = row_fmt.format(
        "Link", "Type", "Summary", "Status", "Updated", "Reporter", "Assignee"
    )
    print(header)
    print("-" * 226)
    for i in issues:
        data = (
            f'{url}/browse/{i["key"]}',
            i["issuetype"],
            i["summary"][:68],
            i["status"],
            i["updated"],
            i["reporter"][:23],
            i["assignee"][:23],
        )
        print(f"{row_fmt}".format(*data))


def get_action():
    return os.environ.get("ROFI_RETV", "0")


def get_issue_url():
    return os.environ.get("ROFI_INFO")


def open_url(url):
    cmd = shlex.split(f'xdg-open "{url}"')
    subprocess.check_output(cmd)


def main():
    cfg = config()

    jql = cfg["jql"]
    url = cfg["url"]
    token = cfg["token"]

    args = parse_args()
    if args.refresh_cache:
        try:
            refresh_cache(url, jql, token)
            log.info("Cache refreshed successfully")
        except Exception as ex:
            log.exception(ex)
    elif args.jql:
        import readline
        import atexit

        histfile = history_file()
        try:
            readline.read_history_file(histfile)
        except FileNotFoundError:
            pass

        atexit.register(readline.write_history_file, histfile)

        while True:
            try:
                jql = input("JQL> ")
                cmd = jql.lower()
                if cmd in set(["exit", "quit", ":q"]):
                    return
                issues = fetch_all_issues(url, jql, token)
                render_plain(url, issues)
            except Exception as e:
                print(e)
            except KeyboardInterrupt as kb:
                return
            print()
    else:
        initial = "0"
        action = get_action()
        if action == initial:
            issues = find_issues(url, jql, token)
            render_issues(issues)
        else:
            url = get_issue_url()
            open_url(url)


if __name__ == "__main__":
    main()
